[{"C:\\JS проекты\\banner-generator\\src\\index.js":"1","C:\\JS проекты\\banner-generator\\src\\reportWebVitals.js":"2","C:\\JS проекты\\banner-generator\\src\\App.js":"3","C:\\JS проекты\\banner-generator\\src\\components\\InputData\\InputData.jsx":"4","C:\\JS проекты\\banner-generator\\src\\components\\Export\\Export.jsx":"5","C:\\JS проекты\\banner-generator\\src\\components\\Banner\\Banner.jsx":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":232,"mtime":1607933888096,"results":"10","hashOfConfig":"8"},{"size":8943,"mtime":1607958574621,"results":"11","hashOfConfig":"8"},{"size":3153,"mtime":1607960380216,"results":"12","hashOfConfig":"8"},{"size":661,"mtime":1607958043528,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1gjhb8y",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"C:\\JS проекты\\banner-generator\\src\\index.js",[],["30","31"],"C:\\JS проекты\\banner-generator\\src\\reportWebVitals.js",[],"C:\\JS проекты\\banner-generator\\src\\App.js",[],"C:\\JS проекты\\banner-generator\\src\\components\\InputData\\InputData.jsx",["32","33"],"import React from \"react\";\r\nimport Banner from \"./../Banner/Banner\";\r\nimport Export from \"./../Export/Export\";\r\n\r\nimport { PhotoshopPicker } from \"react-color\";\r\nimport i from \"./InputData.module.css\";\r\nimport g from \"./GridInput.module.css\";\r\nimport b from \"./../Banner/Banner.module.css\";\r\nimport reactCSS from \"reactcss\";\r\n\r\nconst InputData = (props) => {\r\n  const initialFormData = Object.freeze({\r\n    imgUrl: \"/mustang.png\",\r\n    text: \"Bla-bla car\",\r\n    url: \"http://mail.ru\",\r\n  });\r\n\r\n  const [formData, updateFormData] = React.useState(initialFormData);\r\n  const [colorInfo, updateColor] = React.useState({\r\n    displayColorPicker: false,\r\n    color: {\r\n      r: \"248\",\r\n      g: \"237\",\r\n      b: \"230\",\r\n      a: \"1\",\r\n    },\r\n  });\r\n  const [IcolorInfo, IupdateColor] = React.useState({\r\n    displayColorPicker: false,\r\n    color: {\r\n      r: \"19\",\r\n      g: \"158\",\r\n      b: \"241\",\r\n      a: \"1\",\r\n    },\r\n  });\r\n\r\n  const [data, updateData] = React.useState({\r\n    formData: initialFormData,\r\n    col1: IcolorInfo.color,\r\n    col2: colorInfo.color,\r\n  });\r\n\r\n  const [expBanner, updateBanner] = React.useState({ count: 0 });\r\n\r\n  const handleChange = (e: React.FormEvent) => {\r\n    updateFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const ColorClick = (e: React.FormEvent) => {\r\n    updateColor({\r\n      ...colorInfo,\r\n      displayColorPicker: !colorInfo.displayColorPicker,\r\n    });\r\n  };\r\n\r\n  const IColorClick = (e: React.FormEvent) => {\r\n    IupdateColor({\r\n      ...IcolorInfo,\r\n      displayColorPicker: !IcolorInfo.displayColorPicker,\r\n    });\r\n  };\r\n\r\n  const ColorClose = (e: React.FormEvent) => {\r\n    updateColor({\r\n      ...colorInfo,\r\n      displayColorPicker: false,\r\n    });\r\n  };\r\n\r\n  const IColorClose = (e: React.FormEvent) => {\r\n    IupdateColor({\r\n      ...IcolorInfo,\r\n      displayColorPicker: false,\r\n    });\r\n  };\r\n\r\n  const ColorChange = (color) => {\r\n    updateColor({\r\n      ...colorInfo,\r\n      color: color.rgb,\r\n    });\r\n  };\r\n\r\n  const IColorChange = (color) => {\r\n    IupdateColor({\r\n      ...IcolorInfo,\r\n      color: color.rgb,\r\n    });\r\n  };\r\n\r\n  const output = (e: React.EventHandler) => {};\r\n\r\n  const styles = reactCSS({\r\n    default: {\r\n      color: {\r\n        width: \"36px\",\r\n        height: \"14px\",\r\n        borderRadius: \"2px\",\r\n        background: `rgba(${colorInfo.color.r}, ${colorInfo.color.g}, ${colorInfo.color.b}, ${colorInfo.color.a})`,\r\n      },\r\n      swatch: {\r\n        padding: \"5px\",\r\n        background: \"#fff\",\r\n        borderRadius: \"1px\",\r\n        boxShadow: \"0 0 0 1px rgba(0,0,0,.1)\",\r\n        display: \"inline-block\",\r\n        cursor: \"pointer\",\r\n      },\r\n      popover: {\r\n        position: \"absolute\",\r\n        zIndex: \"2\",\r\n      },\r\n      cover: {\r\n        position: \"fixed\",\r\n        top: \"0px\",\r\n        right: \"0px\",\r\n        bottom: \"0px\",\r\n        left: \"0px\",\r\n      },\r\n    },\r\n  });\r\n\r\n  const Istyles = reactCSS({\r\n    default: {\r\n      color: {\r\n        width: \"36px\",\r\n        height: \"14px\",\r\n        borderRadius: \"2px\",\r\n        background: `rgba(${IcolorInfo.color.r}, ${IcolorInfo.color.g}, ${IcolorInfo.color.b}, ${IcolorInfo.color.a})`,\r\n      },\r\n      swatch: {\r\n        padding: \"5px\",\r\n        background: \"#fff\",\r\n        borderRadius: \"1px\",\r\n        boxShadow: \"0 0 0 1px rgba(0,0,0,.1)\",\r\n        display: \"inline-block\",\r\n        cursor: \"pointer\",\r\n      },\r\n      popover: {\r\n        position: \"absolute\",\r\n        zIndex: \"20\",\r\n      },\r\n      cover: {\r\n        position: \"fixed\",\r\n        top: \"0px\",\r\n        right: \"0px\",\r\n        bottom: \"0px\",\r\n        left: \"0px\",\r\n      },\r\n    },\r\n  });\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    console.log(formData);\r\n    console.log(colorInfo.color);\r\n    console.log(IcolorInfo.color);\r\n    updateData({\r\n      formData: formData,\r\n      col1: colorInfo.color,\r\n      col2: IcolorInfo.color,\r\n    });\r\n    updateBanner({\r\n      ...expBanner,\r\n      count: expBanner.count + e,\r\n    });\r\n    console.log(expBanner);\r\n    // Export.Render(formData, colorInfo.color, IcolorInfo.color);\r\n  };\r\n\r\n  const Render = (inputData, col1, col2) => {\r\n    const styles = reactCSS({\r\n      default: {\r\n        gradient: {\r\n          width: \"300px\",\r\n          height: \"400px\",\r\n          borderRadius: \"15px\",\r\n          background: `linear-gradient(-45deg, rgba(${col2.r},${col2.g},${col2.b},${col2.a}), rgba(${col1.r},${col1.g},${col1.b},${col1.a}))`,\r\n          margin: \"0\",\r\n        },\r\n        link: {\r\n          width: \"300px\" /* Ширина слоя */,\r\n          height: \"400px\" /* Высота слоя */,\r\n          position: \"absolute\",\r\n          zIndex: \"1\",\r\n        },\r\n        a: {\r\n          display: \"block\" /* Ссылка как блочный элемент */,\r\n          textalign: \"center\" /* Выравнивание по центру */,\r\n          height: \"100%\" /* Высота на весь слой */,\r\n          color: \"rgba(102, 102, 102, 0)\" /* Цвет ссылки */,\r\n          zIndex: \"10000\",\r\n        },\r\n        background: {\r\n          width: \"300px\" /* Ширина слоя */,\r\n          height: \"400px\" /* Высота слоя */,\r\n          position: \"relative\",\r\n          overflow: \"hidden\",\r\n        },\r\n        img: {\r\n          position: \"inherit\",\r\n          top: \"20px\",\r\n          left: \"50px\",\r\n          height: \"55%\",\r\n          zIndex: \"0\",\r\n        },\r\n        text: {\r\n          textalign: \"left\",\r\n          top: \"10px\",\r\n          left: \"10px\",\r\n          height: \"30%\",\r\n          fontsize: \"22pt\",\r\n          color: \"white\",\r\n          position: \"relative\",\r\n        },\r\n        textwrapper: {\r\n          width: \"90%\",\r\n          height: \"40%\",\r\n          marginleft: \"20px\",\r\n          position: \"relative\",\r\n          overflow: \"hidden\",\r\n        },\r\n      },\r\n    });\r\n    return (\r\n      <div className={b.banner}>\r\n        <div className={b.background} style={styles.gradient} id=\"new-banner\">\r\n          <div className={b.link} style={styles.link}>\r\n            <a href={inputData.url} style={styles.a}></a>\r\n          </div>\r\n          <img\r\n            className={b.img}\r\n            src={inputData.imgUrl}\r\n            style={styles.img}\r\n            alt=\"\"\r\n          />\r\n          <div className={b.textwrapper} style={styles.textwrapper}>\r\n            <h2 className={b.text} style={styles.text}>\r\n              {inputData.text}\r\n            </h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={g.bannerForm}>\r\n      <div className={i.input}>\r\n        <form className={i.form}>\r\n          <p>\r\n            <label>URL картинки</label>\r\n            <input type=\"text\" name=\"imgUrl\" onChange={handleChange}></input>\r\n          </p>\r\n          <p>\r\n            <label>Текст баннера</label>\r\n            <textarea\r\n              name=\"text\"\r\n              cols=\"60\"\r\n              rows=\"6\"\r\n              onChange={handleChange}\r\n            ></textarea>\r\n          </p>\r\n          <p>\r\n            <label>Ссылка баннера</label>\r\n            <input name=\"url\" type=\"text\" onChange={handleChange}></input>\r\n          </p>\r\n          <div>\r\n            <div style={styles.swatch} onClick={ColorClick}>\r\n              <div style={styles.color} />\r\n            </div>\r\n            {colorInfo.displayColorPicker ? (\r\n              <div style={styles.popover}>\r\n                <div style={styles.cover} onClick={ColorClose} />\r\n                <PhotoshopPicker\r\n                  color={colorInfo.color}\r\n                  onChange={ColorChange}\r\n                />\r\n              </div>\r\n            ) : null}\r\n\r\n            <div style={Istyles.swatch} onClick={IColorClick}>\r\n              <div style={Istyles.color} />\r\n            </div>\r\n            {IcolorInfo.displayColorPicker ? (\r\n              <div style={Istyles.popover}>\r\n                <div style={Istyles.cover} onClick={IColorClose} />\r\n                <PhotoshopPicker\r\n                  color={IcolorInfo.color}\r\n                  onChange={IColorChange}\r\n                />\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n          <p>\r\n            <button value=\"Просмотр\" onClick={handleSubmit}>\r\n              Просмотр\r\n            </button>\r\n          </p>\r\n        </form>\r\n        {/* {{(()=>{\r\n          if (data.col1==) {\r\n            return(\r\n              <Banner formData={data.formData} col1={data.col1} col2={data.col2} />\r\n            )\r\n          }\r\n        })()}}         */}\r\n        <Banner\r\n          formData={data.formData}\r\n          col1={data.col1}\r\n          col2={data.col2}\r\n          Render={Render}\r\n        />\r\n        <Export\r\n          formData={data.formData}\r\n          col1={data.col1}\r\n          col2={data.col2}\r\n          Render={Render}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputData;\r\n","C:\\JS проекты\\banner-generator\\src\\components\\Export\\Export.jsx",["34","35","36","37"],"import React from \"react\";\r\nimport d from \"./Export.module.css\";\r\nimport reactCSS from \"reactcss\";\r\nimport * as htmlToImage from \"html-to-image\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nconst Export = (props) => {\r\n  const example = () => {\r\n    const styles = reactCSS({\r\n      default: {\r\n        gradient: {\r\n          width: \"300px\",\r\n          height: \"400px\",\r\n          borderRadius: \"15px\",\r\n          background: `linear-gradient(-45deg, rgba(241, 112, 19, 1), rgba(241,112,19,1))`,\r\n        },\r\n      },\r\n    });\r\n    return (\r\n      <div className=\"Banner_background\" style={styles.gradient}>\r\n        <div className=\"Banner_link\">\r\n          <a href=\"http://mail.ru\"></a>\r\n        </div>\r\n        <img className=\"Banner_img\" src=\"/mustang.png\" alt=\"\" />\r\n        <div className=\"Banner_textwrapper\">\r\n          <h2 className=\"Banner_text\">text</h2>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handlePng = () => {\r\n    const NewInput = document.getElementById(\"new-banner\");\r\n    console.log(NewInput);\r\n    htmlToImage.toPng(NewInput, { width: 300, height: 400 }).then((canvas) => {\r\n      window.saveAs(canvas, \"banner.png\");\r\n    });\r\n  };\r\n\r\n  const handleJSON = () => {};\r\n\r\n  const styles = reactCSS({\r\n    default: {\r\n      gradient: {\r\n        width: \"300px\",\r\n        height: \"400px\",\r\n        borderRadius: \"15px\",\r\n        background: `linear-gradient(-45deg, rgba(${props.col2.r},${props.col2.g},${props.col2.b},${props.col2.a}), rgba(${props.col1.r},${props.col1.g},${props.col1.b},${props.col1.a}))`,\r\n      },\r\n      link: {\r\n        width: \"300px\" /* Ширина слоя */,\r\n        height: \"400px\" /* Высота слоя */,\r\n        position: \"absolute\",\r\n        zIndex: \"1\",\r\n      },\r\n      a: {\r\n        display: \"block\" /* Ссылка как блочный элемент */,\r\n        textalign: \"center\" /* Выравнивание по центру */,\r\n        height: \"100%\" /* Высота на весь слой */,\r\n        color: \"rgba(102, 102, 102, 0)\" /* Цвет ссылки */,\r\n        zIndex: \"10000\",\r\n      },\r\n      background: {\r\n        width: \"300px\" /* Ширина слоя */,\r\n        height: \"400px\" /* Высота слоя */,\r\n        position: \"relative\",\r\n        overflow: \"hidden\",\r\n      },\r\n      img: {\r\n        position: \"inherit\",\r\n        top: \"20px\",\r\n        left: \"50px\",\r\n        height: \"55%\",\r\n        zIndex: \"0\",\r\n      },\r\n      text: {\r\n        textalign: \"left\",\r\n        top: \"10px\",\r\n        left: \"10px\",\r\n        height: \"30%\",\r\n        fontsize: \"22pt\",\r\n        color: \"white\",\r\n        position: \"relative\",\r\n      },\r\n      textwrapper: {\r\n        width: \"90%\",\r\n        height: \"40%\",\r\n        marginleft: \"20px\",\r\n        position: \"relative\",\r\n        overflow: \"hidden\",\r\n      },\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div className={d.exportwrapper}>\r\n      <div>\r\n        <button onClick={handlePng}>Generate PNG</button>\r\n      </div>\r\n      <div>\r\n        <button onClick={handleJSON}>Export JSON</button>\r\n      </div>\r\n      <div>export json</div>\r\n      <div>copy to buffer jsx </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Export;\r\n","C:\\JS проекты\\banner-generator\\src\\components\\Banner\\Banner.jsx",["38","39","40"],"import React from \"react\";\r\nimport b from \"./Banner.module.css\";\r\nimport reactCSS from \"reactcss\";\r\nimport ReactDOMServer from \"react-dom/server\";\r\n\r\nconst Banner = (props) => {\r\n  return (\r\n    <div>\r\n      {props.Render(props.formData, props.col2, props.col1)}\r\n      <div>\r\n        {(e) => {\r\n          props.func(Math.random());\r\n        }}\r\n      </div>\r\n      <div>\r\n        {/* {console.log(\r\n          ReactDOMServer.renderToString(\r\n            props.Render(props.formData, props.col2, props.col1)\r\n          )\r\n        )} */}\r\n        {console.log(document.getElementById(\"new-banner\"))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":95,"column":9,"nodeType":"47","messageId":"48","endLine":95,"endColumn":15},{"ruleId":"49","severity":1,"message":"50","line":233,"column":13,"nodeType":"51","endLine":233,"endColumn":54},{"ruleId":"45","severity":1,"message":"52","line":5,"column":10,"nodeType":"47","messageId":"48","endLine":5,"endColumn":16},{"ruleId":"45","severity":1,"message":"53","line":8,"column":9,"nodeType":"47","messageId":"48","endLine":8,"endColumn":16},{"ruleId":"49","severity":1,"message":"50","line":22,"column":11,"nodeType":"51","endLine":22,"endColumn":36},{"ruleId":"45","severity":1,"message":"54","line":42,"column":9,"nodeType":"47","messageId":"48","endLine":42,"endColumn":15},{"ruleId":"45","severity":1,"message":"55","line":2,"column":8,"nodeType":"47","messageId":"48","endLine":2,"endColumn":9},{"ruleId":"45","severity":1,"message":"56","line":3,"column":8,"nodeType":"47","messageId":"48","endLine":3,"endColumn":16},{"ruleId":"45","severity":1,"message":"57","line":4,"column":8,"nodeType":"47","messageId":"48","endLine":4,"endColumn":22},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'output' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'saveAs' is defined but never used.","'example' is assigned a value but never used.","'styles' is assigned a value but never used.","'b' is defined but never used.","'reactCSS' is defined but never used.","'ReactDOMServer' is defined but never used.","no-global-assign","no-unsafe-negation"]